#[cfg(test)]
mod tests {
    use ec_cryptosystems::diffie_hellman::{EphemeralSecret, PublicKey};
    use ec_cryptosystems::digital_signature::{Signer, Verifier};
    use ec_cryptosystems::directed_encryption::Encryptor;

    use rust_ec::{EcInfo, PreGeneratedParams};

    #[test]
    fn sign() {
        let ec = EcInfo::from(PreGeneratedParams::P192);

        let alice_secret = EphemeralSecret::random(&ec);
        let alice_pub_key = PublicKey::from(&alice_secret);
        // let msg = "Checking message for integrity".as_bytes().to_vec();
        // let flawed_msg = "Check1ng message for 1ntegr1ty".as_bytes().to_vec();
        let msg = [
            0x2D, 0x20, 0x5B, 0x2A, 0x5D, 0x20, 0xD0, 0x97, 0xD0, 0xBD, 0xD0, 0xB8, 0xD0, 0xB6,
            0xD0, 0xB5, 0xD0, 0xBD, 0xD0, 0xBD, 0xD1, 0x8F, 0x20, 0xD1, 0x80, 0xD0, 0xBE, 0xD0,
            0xB7, 0xD0, 0xBC, 0xD1, 0x96, 0xD1, 0x80, 0xD0, 0xBD, 0xD0, 0xBE, 0xD1, 0x81, 0xD1,
            0x82, 0xD1, 0x96, 0x20, 0xD1, 0x96, 0x20, 0xD0, 0xB2, 0xD1, 0x96, 0xD0, 0xB7, 0xD1,
            0x83, 0xD0, 0xB0, 0xD0, 0xBB, 0xD1, 0x96, 0xD0, 0xB7, 0xD0, 0xB0, 0xD1, 0x86, 0xD1,
            0x96, 0xD1, 0x8F, 0x20, 0xD0, 0xB4, 0xD0, 0xB0, 0xD0, 0xBD, 0xD0, 0xB8, 0xD1, 0x85,
            0x0A, 0x2D, 0x20, 0x5B, 0x2A, 0x5D, 0x20, 0xD0, 0x9A, 0xD0, 0xBB, 0xD0, 0xB0, 0xD1,
            0x81, 0xD1, 0x82, 0xD0, 0xB5, 0xD1, 0x80, 0xD0, 0xBD, 0xD0, 0xB8, 0xD0, 0xB9, 0x20,
            0xD0, 0xB0, 0xD0, 0xBD, 0xD0, 0xB0, 0xD0, 0xBB, 0xD1, 0x96, 0xD0, 0xB7, 0x0A, 0x2D,
            0x20, 0x5B, 0x2A, 0x5D, 0x20, 0xD0, 0x9E, 0xD0, 0xB1, 0xD1, 0x80, 0xD0, 0xBE, 0xD0,
            0xB1, 0xD0, 0xBA, 0xD0, 0xB0, 0x20, 0xD1, 0x82, 0xD0, 0xB0, 0x20, 0xD0, 0xBA, 0xD0,
            0xBB, 0xD0, 0xB0, 0xD1, 0x81, 0xD0, 0xB8, 0xD1, 0x84, 0xD1, 0x96, 0xD0, 0xBA, 0xD0,
            0xB0, 0xD1, 0x86, 0xD1, 0x96, 0xD1, 0x8F, 0x20, 0xD1, 0x82, 0xD0, 0xB5, 0xD0, 0xBA,
            0xD1, 0x81, 0xD1, 0x82, 0xD0, 0xBE, 0xD0, 0xB2, 0xD0, 0xB8, 0xD1, 0x85, 0x20, 0xD0,
            0xB4, 0xD0, 0xB0, 0xD0, 0xBD, 0xD0, 0xB8, 0xD1, 0x85, 0x0A, 0x0A, 0xD0, 0xBA, 0xD0,
            0xB0, 0xD1, 0x80, 0xD1, 0x82, 0xD0, 0xB8, 0xD0, 0xBD, 0xD0, 0xBA, 0xD0, 0xB0, 0x20,
            0xD1, 0x94, 0x0A, 0x0A, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3A, 0x2F, 0x2F, 0x77, 0x77,
            0x77, 0x2E, 0x6B, 0x61, 0x67, 0x67, 0x6C, 0x65, 0x2E, 0x63, 0x6F, 0x6D, 0x2F, 0x64,
            0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2F, 0x73, 0x61, 0x75, 0x72, 0x61, 0x62,
            0x68, 0x73, 0x68, 0x61, 0x68, 0x61, 0x6E, 0x65, 0x2F, 0x65, 0x63, 0x6F, 0x6D, 0x6D,
            0x65, 0x72, 0x63, 0x65, 0x2D, 0x74, 0x65, 0x78, 0x74, 0x2D, 0x63, 0x6C, 0x61, 0x73,
            0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x0A, 0x0A, 0x68, 0x74,
            0x74, 0x70, 0x73, 0x3A, 0x2F, 0x2F, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2E, 0x67, 0x6F,
            0x6F, 0x67, 0x6C, 0x65, 0x2E, 0x63, 0x6F, 0x6D, 0x2F, 0x64, 0x72, 0x69, 0x76, 0x65,
            0x2F, 0x75, 0x2F, 0x33, 0x2F, 0x66, 0x6F, 0x6C, 0x64, 0x65, 0x72, 0x73, 0x2F, 0x31,
            0x32, 0x68, 0x6D, 0x67, 0x50, 0x6F, 0x45, 0x4B, 0x54, 0x35, 0x6C, 0x61, 0x59, 0x4A,
            0x47, 0x45, 0x6B, 0x46, 0x73, 0x6D, 0x42, 0x66, 0x74, 0x78, 0x79, 0x38, 0x7A, 0x6D,
            0x54, 0x51, 0x39, 0x43,
        ];
        let flawed_msg = [
            0x2D, 0x20, 0x5B, 0x2A, 0x5D, 0x20, 0xD0, 0x97, 0xD0, 0xBD, 0xD0, 0xB8, 0xD0, 0xB6,
            0xD0, 0xB5, 0xD0, 0xBD, 0xD0, 0xBD, 0xD1, 0x8F, 0x20, 0xD1, 0x80, 0xD0, 0xBE, 0xD0,
            0xB7, 0xD0, 0xBC, 0xD1, 0x96, 0xD1, 0x80, 0xD0, 0xBD, 0xD0, 0xBE, 0xD1, 0x81, 0xD1,
            0x82, 0xD1, 0x96, 0x20, 0xD1, 0x96, 0x20, 0xD0, 0xB2, 0xD1, 0x96, 0xD0, 0xB7, 0xD1,
            0x83, 0xD0, 0xB0, 0xD0, 0xBB, 0xD1, 0x96, 0xD0, 0xB7, 0xD0, 0xB0, 0xD1, 0x86, 0xD1,
            0x96, 0xD1, 0x8F, 0x20, 0xD0, 0xB4, 0xD0, 0xB0, 0xD0, 0xBD, 0xD0, 0xB8, 0xD1, 0x85,
            0x0A, 0x2D, 0x20, 0x5B, 0x2A, 0x5D, 0x20, 0xD0, 0x9A, 0xD0, 0xBB, 0xD0, 0xB0, 0xD1,
            0x81, 0xD1, 0x82, 0xD0, 0xB5, 0xD1, 0x80, 0xD0, 0xBD, 0xD0, 0xB8, 0xD0, 0xB9, 0x20,
            0xD0, 0xB0, 0xD0, 0xBD, 0xD0, 0xB0, 0xD0, 0xBB, 0xD1, 0x96, 0xD0, 0xB7, 0x0A, 0x2D,
            0x20, 0x5B, 0x2A, 0x5D, 0x20, 0xD0, 0x9E, 0xD0, 0xB1, 0xD1, 0x80, 0xD0, 0xBE, 0xD0,
            0xB1, 0xD0, 0xBA, 0xD0, 0xB0, 0x20, 0xD1, 0x82, 0xD0, 0xB0, 0x20, 0xD0, 0xBA, 0xD0,
            0xBB, 0xD0, 0xB0, 0xD1, 0x81, 0xD0, 0xB8, 0xD1, 0x84, 0xD1, 0x96, 0xD0, 0xBA, 0xD0,
            0xB0, 0xD1, 0x86, 0xD1, 0x96, 0xD1, 0x8F, 0x20, 0xD1, 0x82, 0xD0, 0xB5, 0xD0, 0xBA,
            0xD1, 0x81, 0xD1, 0x82, 0xD0, 0xBE, 0xD0, 0xB2, 0xD0, 0xB8, 0xD1, 0x85, 0x20, 0xD0,
            0xB4, 0xD0, 0xB0, 0xD0, 0xBD, 0xD0, 0xB8, 0xD1, 0x85, 0x0A, 0x0A, 0xD0, 0xBA, 0xD0,
            0xB0, 0xD1, 0x80, 0xD1, 0x82, 0xD0, 0xB8, 0xD0, 0xBD, 0xD0, 0xBA, 0xD0, 0xB0, 0x20,
            0xD1, 0x94, 0x0A, 0x0A, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3A, 0x2F, 0x2F, 0x77, 0x77,
            0x77, 0x2E, 0x6B, 0x61, 0x67, 0x67, 0x6C, 0x65, 0x2E, 0x63, 0x6F, 0x6D, 0x2F, 0x64,
            0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2F, 0x73, 0x61, 0x75, 0x72, 0x61, 0x62,
            0x68, 0x73, 0x68, 0x61, 0x68, 0x61, 0x6E, 0x65, 0x2F, 0x65, 0x63, 0x6F, 0x6D, 0x6D,
            0x65, 0x72, 0x63, 0x65, 0x2D, 0x74, 0x65, 0x78, 0x74, 0x2D, 0x63, 0x6C, 0x61, 0x73,
            0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x0A, 0x0A, 0x68, 0x74,
            0x74, 0x70, 0x73, 0x3A, 0x2F, 0x2F, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2E, 0x67, 0x6F,
            0x6F, 0x67, 0x6C, 0x65, 0x2E, 0x63, 0x6F, 0x6D, 0x2F, 0x64, 0x72, 0x69, 0x76, 0x65,
            0x2F, 0x75, 0x2F, 0x33, 0x2F, 0x66, 0x6F, 0x6C, 0x64, 0x65, 0x72, 0x73, 0x2F, 0x31,
            0x32, 0x68, 0x6D, 0x67, 0x50, 0x6F, 0x45, 0x4B, 0x54, 0x35, 0x6C, 0x61, 0x59, 0x4A,
            0x47, 0x45, 0x6B, 0x46, 0x73, 0x6D, 0x42, 0x66, 0x74, 0x78, 0x79, 0x38, 0x7A, 0x6D,
            0x54, 0x51, 0x39, 0x44,
        ];

        let sign = Signer::sign(&msg, &alice_secret);
        assert!(Verifier::verify(&msg, &sign, &alice_pub_key));
        assert!(!Verifier::verify(&flawed_msg, &sign, &alice_pub_key));
    }

    #[test]
    fn diffie_hellman() {
        let ec = EcInfo::from(PreGeneratedParams::P192);

        let alice_secret = EphemeralSecret::random(&ec);
        let alice_pub_key = PublicKey::from(&alice_secret);

        let bob_secret = EphemeralSecret::random(&ec);
        let bob_pub_key = PublicKey::from(&bob_secret);

        let alice_shared_secret = alice_secret.diffie_hellman(bob_pub_key);
        let bob_shared_secret = bob_secret.diffie_hellman(alice_pub_key);

        assert_eq!(alice_shared_secret, bob_shared_secret)
    }

    #[test]
    fn enc_dec() {
        let ec = EcInfo::from(PreGeneratedParams::P192);
        // let msg = [
        //     0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
        //     0x0F,
        // ];
        let msg = [
            0x2D, 0x20, 0x5B, 0x2A, 0x5D, 0x20, 0xD0, 0x97, 0xD0, 0xBD, 0xD0, 0xB8, 0xD0, 0xB6,
            0xD0, 0xB5, 0xD0, 0xBD, 0xD0, 0xBD, 0xD1, 0x8F, 0x20, 0xD1, 0x80, 0xD0, 0xBE, 0xD0,
            0xB7, 0xD0, 0xBC, 0xD1, 0x96, 0xD1, 0x80, 0xD0, 0xBD, 0xD0, 0xBE, 0xD1, 0x81, 0xD1,
            0x82, 0xD1, 0x96, 0x20, 0xD1, 0x96, 0x20, 0xD0, 0xB2, 0xD1, 0x96, 0xD0, 0xB7, 0xD1,
            0x83, 0xD0, 0xB0, 0xD0, 0xBB, 0xD1, 0x96, 0xD0, 0xB7, 0xD0, 0xB0, 0xD1, 0x86, 0xD1,
            0x96, 0xD1, 0x8F, 0x20, 0xD0, 0xB4, 0xD0, 0xB0, 0xD0, 0xBD, 0xD0, 0xB8, 0xD1, 0x85,
            0x0A, 0x2D, 0x20, 0x5B, 0x2A, 0x5D, 0x20, 0xD0, 0x9A, 0xD0, 0xBB, 0xD0, 0xB0, 0xD1,
            0x81, 0xD1, 0x82, 0xD0, 0xB5, 0xD1, 0x80, 0xD0, 0xBD, 0xD0, 0xB8, 0xD0, 0xB9, 0x20,
            0xD0, 0xB0, 0xD0, 0xBD, 0xD0, 0xB0, 0xD0, 0xBB, 0xD1, 0x96, 0xD0, 0xB7, 0x0A, 0x2D,
            0x20, 0x5B, 0x2A, 0x5D, 0x20, 0xD0, 0x9E, 0xD0, 0xB1, 0xD1, 0x80, 0xD0, 0xBE, 0xD0,
            0xB1, 0xD0, 0xBA, 0xD0, 0xB0, 0x20, 0xD1, 0x82, 0xD0, 0xB0, 0x20, 0xD0, 0xBA, 0xD0,
            0xBB, 0xD0, 0xB0, 0xD1, 0x81, 0xD0, 0xB8, 0xD1, 0x84, 0xD1, 0x96, 0xD0, 0xBA, 0xD0,
            0xB0, 0xD1, 0x86, 0xD1, 0x96, 0xD1, 0x8F, 0x20, 0xD1, 0x82, 0xD0, 0xB5, 0xD0, 0xBA,
            0xD1, 0x81, 0xD1, 0x82, 0xD0, 0xBE, 0xD0, 0xB2, 0xD0, 0xB8, 0xD1, 0x85, 0x20, 0xD0,
            0xB4, 0xD0, 0xB0, 0xD0, 0xBD, 0xD0, 0xB8, 0xD1, 0x85, 0x0A, 0x0A, 0xD0, 0xBA, 0xD0,
            0xB0, 0xD1, 0x80, 0xD1, 0x82, 0xD0, 0xB8, 0xD0, 0xBD, 0xD0, 0xBA, 0xD0, 0xB0, 0x20,
            0xD1, 0x94, 0x0A, 0x0A, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3A, 0x2F, 0x2F, 0x77, 0x77,
            0x77, 0x2E, 0x6B, 0x61, 0x67, 0x67, 0x6C, 0x65, 0x2E, 0x63, 0x6F, 0x6D, 0x2F, 0x64,
            0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2F, 0x73, 0x61, 0x75, 0x72, 0x61, 0x62,
            0x68, 0x73, 0x68, 0x61, 0x68, 0x61, 0x6E, 0x65, 0x2F, 0x65, 0x63, 0x6F, 0x6D, 0x6D,
            0x65, 0x72, 0x63, 0x65, 0x2D, 0x74, 0x65, 0x78, 0x74, 0x2D, 0x63, 0x6C, 0x61, 0x73,
            0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x0A, 0x0A, 0x68, 0x74,
            0x74, 0x70, 0x73, 0x3A, 0x2F, 0x2F, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2E, 0x67, 0x6F,
            0x6F, 0x67, 0x6C, 0x65, 0x2E, 0x63, 0x6F, 0x6D, 0x2F, 0x64, 0x72, 0x69, 0x76, 0x65,
            0x2F, 0x75, 0x2F, 0x33, 0x2F, 0x66, 0x6F, 0x6C, 0x64, 0x65, 0x72, 0x73, 0x2F, 0x31,
            0x32, 0x68, 0x6D, 0x67, 0x50, 0x6F, 0x45, 0x4B, 0x54, 0x35, 0x6C, 0x61, 0x59, 0x4A,
            0x47, 0x45, 0x6B, 0x46, 0x73, 0x6D, 0x42, 0x66, 0x74, 0x78, 0x79, 0x38, 0x7A, 0x6D,
            0x54, 0x51, 0x39, 0x43,
        ];

        let alice_secret = EphemeralSecret::random(&ec);
        let alice_pub_key = PublicKey::from(&alice_secret);

        let bob_secret = EphemeralSecret::random(&ec);
        let bob_pub_key = PublicKey::from(&bob_secret);

        let alice_shared_secret = alice_secret.diffie_hellman(bob_pub_key);
        let bob_shared_secret = bob_secret.diffie_hellman(alice_pub_key);

        let ct = Encryptor::encrypt(&msg, &alice_shared_secret);
        let pt = Encryptor::decrypt(&ct, &bob_shared_secret);

        assert_eq!(msg.as_slice(), pt.as_slice())
    }
}
